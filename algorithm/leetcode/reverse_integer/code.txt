/*
Reverse digits of an integer.

Example1: x = 123, return 321
Example2: x = -123, return -321

click to show spoilers.
Have you thought about this?
Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!
If the integer's last digit is 0, what should the output be? ie, cases such as 10, 100.
Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?
Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter).

如果考虑越界的话用long long 代替int，最后判断reverse后的数是不是 > INT_MAX 或  < INT_MIN
如果输入就是long long的话，在中间判断是不是越界，

a * b = c 判断a乘以b后有没有越界 c / b == a ?
a + b = c 判断a+b后有没有越界 c - b == a ?
*/

class Solution {
 public:
  int reverse(int x) {
    int foo = x;
    int rs = 0;
    if (foo <0) foo *= -1;
    while (foo != 0) {
      int val = foo % 10;
      foo /= 10;
      if (val == 0 && rs == 0) continue;
      rs = rs * 10 + val;
    }
    if (x < 0) rs *= -1;
    return rs;
  }
};

namespace twice {

class Solution {
 public:
  int reverse(int x) {
    bool minus = x < 0 ? true : false;
    if (minus) x *= -1;
    int rs = 0;
    while (x) {
      rs = rs * 10 + x % 10;
      x /= 10;
    }
    if (minus) return -rs;
    return rs;
  }
};
}  // namespace twice
