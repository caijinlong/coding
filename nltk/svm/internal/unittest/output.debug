modelout {
  01: para (struct) = parameter {
    01: c (double) = 1,
    10: weights (map) = map<i32,double>[0] {
    },
    20: degree (double) = 3,
    30: gamma (double) = 0.0093457943925233638,
    40: coef0 (double) = 0,
    50: mem_size (double) = 1000,
    60: eps (double) = 0.001,
    70: kernel_type (i32) = 3,
  },
  10: model (map) = map<i32,map>[1] {
    1 -> map<i32,struct>[1] {
      -1 -> modelnode {
        01: b (double) = 1.0214234869260439,
        10: best_obj (double) = -3.9224114827318108,
        20: sparse_array (map) = map<i32,double>[20] {
          0 -> 1,
          1 -> 1,
          2 -> -0.55334797415749304,
          3 -> -0,
          4 -> -0,
          5 -> -0,
          6 -> -0.32017843255367784,
          7 -> -0.0084610093740305203,
          8 -> -0.64570522581254852,
          9 -> -0.089089096179430852,
          10 -> -0.076460420612925101,
          11 -> -0,
          12 -> -0,
          13 -> -0,
          14 -> -0,
          15 -> -0,
          16 -> -0.083209219037118795,
          17 -> -0.046134634775945885,
          18 -> -0,
          19 -> -0.17741398749682957,
        },
      },
    },
  },
  20: node (list) = list<struct>[20] {
    [0] = problemnode {
      01: lable (i32) = 1,
      10: sparse_array (map) = map<i32,double>[14] {
        5 -> 1,
        11 -> 1,
        15 -> 1,
        32 -> 1,
        39 -> 1,
        40 -> 1,
        52 -> 1,
        63 -> 1,
        67 -> 1,
        73 -> 1,
        74 -> 1,
        76 -> 1,
        78 -> 1,
        83 -> 1,
      },
    },
    [1] = problemnode {
      01: lable (i32) = 1,
      10: sparse_array (map) = map<i32,double>[12] {
        5 -> 1,
        18 -> 1,
        19 -> 1,
        39 -> 1,
        40 -> 1,
        63 -> 1,
        67 -> 1,
        73 -> 1,
        74 -> 1,
        76 -> 1,
        80 -> 1,
        83 -> 1,
      },
    },
    [2] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[14] {
        2 -> 1,
        6 -> 1,
        15 -> 1,
        19 -> 1,
        39 -> 1,
        40 -> 1,
        52 -> 1,
        63 -> 1,
        67 -> 1,
        73 -> 1,
        74 -> 1,
        76 -> 1,
        82 -> 1,
        83 -> 1,
      },
    },
    [3] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[14] {
        4 -> 1,
        6 -> 1,
        18 -> 1,
        22 -> 1,
        36 -> 1,
        44 -> 1,
        51 -> 1,
        66 -> 1,
        71 -> 1,
        72 -> 1,
        74 -> 1,
        76 -> 1,
        80 -> 1,
        83 -> 1,
      },
    },
    [4] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[14] {
        1 -> 1,
        6 -> 1,
        14 -> 1,
        20 -> 1,
        37 -> 1,
        40 -> 1,
        55 -> 1,
        63 -> 1,
        67 -> 1,
        73 -> 1,
        74 -> 1,
        76 -> 1,
        80 -> 1,
        83 -> 1,
      },
    },
    [5] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[14] {
        1 -> 1,
        6 -> 1,
        17 -> 1,
        22 -> 1,
        36 -> 1,
        42 -> 1,
        53 -> 1,
        64 -> 1,
        67 -> 1,
        73 -> 1,
        74 -> 1,
        76 -> 1,
        82 -> 1,
        107 -> 1,
      },
    },
    [6] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[14] {
        2 -> 1,
        11 -> 1,
        18 -> 1,
        20 -> 1,
        37 -> 1,
        40 -> 1,
        54 -> 1,
        63 -> 1,
        67 -> 1,
        73 -> 1,
        74 -> 1,
        76 -> 1,
        80 -> 1,
        83 -> 1,
      },
    },
    [7] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[14] {
        1 -> 1,
        11 -> 1,
        18 -> 1,
        20 -> 1,
        37 -> 1,
        42 -> 1,
        59 -> 1,
        62 -> 1,
        71 -> 1,
        72 -> 1,
        74 -> 1,
        76 -> 1,
        80 -> 1,
        83 -> 1,
      },
    },
    [8] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[14] {
        5 -> 1,
        7 -> 1,
        16 -> 1,
        29 -> 1,
        39 -> 1,
        40 -> 1,
        48 -> 1,
        63 -> 1,
        67 -> 1,
        73 -> 1,
        74 -> 1,
        76 -> 1,
        78 -> 1,
        83 -> 1,
      },
    },
    [9] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[14] {
        5 -> 1,
        6 -> 1,
        15 -> 1,
        20 -> 1,
        37 -> 1,
        40 -> 1,
        50 -> 1,
        63 -> 1,
        67 -> 1,
        73 -> 1,
        75 -> 1,
        76 -> 1,
        80 -> 1,
        83 -> 1,
      },
    },
    [10] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[12] {
        5 -> 1,
        16 -> 1,
        30 -> 1,
        35 -> 1,
        41 -> 1,
        64 -> 1,
        67 -> 1,
        73 -> 1,
        74 -> 1,
        76 -> 1,
        80 -> 1,
        83 -> 1,
      },
    },
    [11] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[14] {
        2 -> 1,
        6 -> 1,
        18 -> 1,
        20 -> 1,
        37 -> 1,
        42 -> 1,
        48 -> 1,
        64 -> 1,
        71 -> 1,
        73 -> 1,
        74 -> 1,
        76 -> 1,
        81 -> 1,
        83 -> 1,
      },
    },
    [12] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[14] {
        1 -> 1,
        6 -> 1,
        17 -> 1,
        19 -> 1,
        39 -> 1,
        42 -> 1,
        53 -> 1,
        64 -> 1,
        67 -> 1,
        73 -> 1,
        74 -> 1,
        76 -> 1,
        80 -> 1,
        83 -> 1,
      },
    },
    [13] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[14] {
        1 -> 1,
        6 -> 1,
        14 -> 1,
        22 -> 1,
        36 -> 1,
        42 -> 1,
        49 -> 1,
        64 -> 1,
        67 -> 1,
        72 -> 1,
        74 -> 1,
        77 -> 1,
        80 -> 1,
        83 -> 1,
      },
    },
    [14] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[14] {
        2 -> 1,
        6 -> 1,
        14 -> 1,
        20 -> 1,
        37 -> 1,
        41 -> 1,
        47 -> 1,
        64 -> 1,
        67 -> 1,
        73 -> 1,
        74 -> 1,
        76 -> 1,
        82 -> 1,
        83 -> 1,
      },
    },
    [15] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[14] {
        2 -> 1,
        6 -> 1,
        16 -> 1,
        22 -> 1,
        36 -> 1,
        40 -> 1,
        54 -> 1,
        63 -> 1,
        67 -> 1,
        73 -> 1,
        75 -> 1,
        76 -> 1,
        80 -> 1,
        83 -> 1,
      },
    },
    [16] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[14] {
        5 -> 1,
        6 -> 1,
        15 -> 1,
        22 -> 1,
        36 -> 1,
        41 -> 1,
        47 -> 1,
        66 -> 1,
        67 -> 1,
        72 -> 1,
        74 -> 1,
        76 -> 1,
        80 -> 1,
        83 -> 1,
      },
    },
    [17] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[14] {
        4 -> 1,
        6 -> 1,
        15 -> 1,
        21 -> 1,
        35 -> 1,
        40 -> 1,
        57 -> 1,
        63 -> 1,
        67 -> 1,
        73 -> 1,
        74 -> 1,
        77 -> 1,
        80 -> 1,
        83 -> 1,
      },
    },
    [18] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[14] {
        3 -> 1,
        6 -> 1,
        17 -> 1,
        27 -> 1,
        35 -> 1,
        40 -> 1,
        57 -> 1,
        63 -> 1,
        69 -> 1,
        73 -> 1,
        74 -> 1,
        76 -> 1,
        81 -> 1,
        103 -> 1,
      },
    },
    [19] = problemnode {
      01: lable (i32) = -1,
      10: sparse_array (map) = map<i32,double>[14] {
        3 -> 1,
        11 -> 1,
        14 -> 1,
        19 -> 1,
        39 -> 1,
        42 -> 1,
        55 -> 1,
        64 -> 1,
        67 -> 1,
        73 -> 1,
        75 -> 1,
        76 -> 1,
        80 -> 1,
        83 -> 1,
      },
    },
  },
  30: start (map) = map<i32,i32>[2] {
    -1 -> 2,
    1 -> 0,
  },
  40: count (map) = map<i32,i32>[2] {
    -1 -> 18,
    1 -> 2,
  },
  50: feature_max_min (map) = map<i32,struct>[60] {
    1 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    2 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    3 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    4 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    5 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    6 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    7 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    11 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    14 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    15 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    16 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    17 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    18 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    19 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    20 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    21 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    22 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    27 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    29 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    30 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    32 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    35 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    36 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    37 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    39 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    40 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    41 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    42 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    44 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    47 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    48 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    49 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    50 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    51 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    52 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    53 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    54 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    55 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    57 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    59 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    62 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    63 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    64 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    66 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    67 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    69 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    71 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    72 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    73 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    74 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    75 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    76 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    77 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    78 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    80 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    81 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    82 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    83 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    103 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
    107 -> featurenode {
      01: max (double) = 1,
      10: min (double) = 1,
    },
  },
} 