// Copyright 2013 Jike Inc. All Rights Reserved.
// Author: Liqiang Guo(guoliqiang@jike.com)
// I just want to GH to hss~
// Date  : 2013-09-07 12:58:32
// File  : problem.cc
// Brief :

#include "../public/problem.h"
#include "base/public/string_util.h"
#include "file/public/file.h"

namespace nltk {
namespace svm {

DEFINE_double(c, 1, "");
DEFINE_double(degree, 1, "");
DEFINE_double(gamma, 1, "");
DEFINE_double(coef0, 1, "");
DEFINE_string(kernel_type, "UNKNOWN", "");


bool Problem::ReadFile(std::string & path) {
  std::string content;
  std::vector<std::string> lines;
  file::File::ReadFileToStringOrDie(path, &content);
  Tokenize(content, "\r\n", &lines);
  std::vector<std::string> parts;
  std::vector<std::string> foo;
  for (int i = 0; i < lines.size(); i++) {
    parts.clear();
    Tokenize(lines[i], "\t ", &parts);
    CHECK_GT(parts.size(), 1);
    CHECK(parts[0].find(':') == std::string::npos);
    int lable = StringToInt(parts[0]);

    base::NormalSarray<double> * bar = new base::NormalSarray<double>();
    for (int j = 1; j < parts.size() ; j++) {
      std::vector<std::string> foo;
      SplitString(parts[j], ':', &foo);
      CHECK_EQ(foo.size(), 2);
      int32_t index = StringToInt(foo[0]);
      double value = StringToDouble(foo[1]);
      CHECK_GE(index, 0);
      bar->insert(index, value);
    }
    lines_.insert(std::make_pair(lable, bar));
  }
  for (line_iterator i = lines_.begin(); i != lines_.end(); i++) {
    if (lable_index_.count(i->first)) {
      CHECK(index_lable_.size() > lable_index_[i->first]);
      groups_[lable_index_[i->first]]->push_back(i);
    } else {
      std::vector<line_iterator>*
           foo = new std::vector<line_iterator>();
      lable_index_.insert(std::make_pair(i->first, index_lable_.size()));
      index_lable_.push_back(i->first);
      groups_.push_back(foo);
    }
  }
  CHECK(groups_.size() == lable_index_.size());
  CHECK(groups_.size() == index_lable_.size());
  return true;
}
}  // namspace svm
}  // namespace nltk
