// Copyright 2013 Jike Inc. All Rights Reserved.
// Author: Liqiang Guo(guoliqiang@jike.com)
// I just want to GH to hss~
// Date  : 2013-09-07 11:49:52
// File  : problem.h
// Brief :

#ifndef  __PROBLEM_H_
#define  __PROBLEM_H_

#include "base/public/logging.h"
#include "base/public/normal_sparse_array.h"
#include "base/public/singleton.h"
#include "third_part/string/public/string_enum.h"
#include<map>

namespace nltk {
namespace svm {
enum KernelType {
  UNKNOWN = 0,
  LINEAR = 1,
  POLY = 2,
  RBF = 3,
  SIGMOID = 4,
};
}  // namesace svm
}  // namespace nltk

BEGIN_STRINGMAP_PARSER(nltk::svm::KernelType)
  STRINGMAP_ENUM(nltk::svm::UNKNOWN)
  STRINGMAP_ENUM(nltk::svm::LINEAR)
  STRINGMAP_ENUM(nltk::svm::POLY)
  STRINGMAP_ENUM(nltk::svm::RBF)
  STRINGMAP_ENUM(nltk::svm::SIGMOID)
END_STRINGMAP_PARSER()

namespace nltk {
namespace svm {

static util::StringEnumParser<KernelType> g_kernel_type;

DECLARE_double(c);
DECLARE_double(degree);
DECLARE_double(gamma);
DECLARE_double(coef0);
DECLARE_string(kernel_type);

class Parameter {
 public:
  Parameter() {
    c_ = FLAGS_c;
    degree_ = FLAGS_degree;
    gamma_ = FLAGS_gamma;
    coef0_ = FLAGS_coef0;
    CHECK(g_kernel_type.String2Enum(FLAGS_kernel_type, &kernel_type_));
  }
 public:
  double c_;
  std::vector<double> weights_;
  double degree_;
  double gamma_;
  double coef0_;
  KernelType kernel_type_;
};

class Problem {
 public:
  static Problem & GetInstance() {
    return * Singleton<Problem>::get();
  }

  bool ReadFile(std::string & path);
  
  Problem() {}
  ~Problem() {
    for (std::multimap<int32_t,
         base::NormalSarray<double> *>::iterator i = lines_.begin();
         i != lines_.end(); i++) {
      delete i->second;
    }
    lines_.clear();
    for (group_iterator i = groups_.begin(); i != groups_.end(); i++) {
      delete *i;
    }
    groups_.clear();
  }
 
 public:
  typedef std::multimap<int32_t,
          base::NormalSarray<double> *>::iterator line_iterator;
  typedef std::vector<std::vector<line_iterator>* >::iterator group_iterator;

  std::multimap<int32_t, base::NormalSarray<double> *> lines_;
  std::vector<std::vector<line_iterator>* > groups_;
  std::vector<int32_t> index_lable_;
  std::map<int32_t, uint32_t> lable_index_;

 public:
  Parameter para;

 private:
  friend struct DefaultSingletonTraits<Problem>;
  DISALLOW_COPY_AND_ASSIGN(Problem);
};
}  // namespace svm
}  // namespace nltk

#endif  //__PROBLEM_H_
