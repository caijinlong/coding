/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ClusteringService_H
#define ClusteringService_H

#include <thrift/TDispatchProcessor.h>
#include "clustering_types.h"



class ClusteringServiceIf {
 public:
  virtual ~ClusteringServiceIf() {}
  virtual void SendHumanMerge(const int64_t cluster_id1, const int64_t cluster_id2) = 0;
  virtual void SendHumanDelete(const int64_t cluster_id) = 0;
  virtual int32_t IsAlive() = 0;
};

class ClusteringServiceIfFactory {
 public:
  typedef ClusteringServiceIf Handler;

  virtual ~ClusteringServiceIfFactory() {}

  virtual ClusteringServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ClusteringServiceIf* /* handler */) = 0;
};

class ClusteringServiceIfSingletonFactory : virtual public ClusteringServiceIfFactory {
 public:
  ClusteringServiceIfSingletonFactory(const boost::shared_ptr<ClusteringServiceIf>& iface) : iface_(iface) {}
  virtual ~ClusteringServiceIfSingletonFactory() {}

  virtual ClusteringServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ClusteringServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ClusteringServiceIf> iface_;
};

class ClusteringServiceNull : virtual public ClusteringServiceIf {
 public:
  virtual ~ClusteringServiceNull() {}
  void SendHumanMerge(const int64_t /* cluster_id1 */, const int64_t /* cluster_id2 */) {
    return;
  }
  void SendHumanDelete(const int64_t /* cluster_id */) {
    return;
  }
  int32_t IsAlive() {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _ClusteringService_SendHumanMerge_args__isset {
  _ClusteringService_SendHumanMerge_args__isset() : cluster_id1(false), cluster_id2(false) {}
  bool cluster_id1;
  bool cluster_id2;
} _ClusteringService_SendHumanMerge_args__isset;

class ClusteringService_SendHumanMerge_args {
 public:

  ClusteringService_SendHumanMerge_args() : cluster_id1(0), cluster_id2(0) {
  }

  virtual ~ClusteringService_SendHumanMerge_args() throw() {}

  int64_t cluster_id1;
  int64_t cluster_id2;

  _ClusteringService_SendHumanMerge_args__isset __isset;

  void __set_cluster_id1(const int64_t val) {
    cluster_id1 = val;
  }

  void __set_cluster_id2(const int64_t val) {
    cluster_id2 = val;
  }

  bool operator == (const ClusteringService_SendHumanMerge_args & rhs) const
  {
    if (!(cluster_id1 == rhs.cluster_id1))
      return false;
    if (!(cluster_id2 == rhs.cluster_id2))
      return false;
    return true;
  }
  bool operator != (const ClusteringService_SendHumanMerge_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusteringService_SendHumanMerge_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClusteringService_SendHumanMerge_pargs {
 public:


  virtual ~ClusteringService_SendHumanMerge_pargs() throw() {}

  const int64_t* cluster_id1;
  const int64_t* cluster_id2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClusteringService_SendHumanMerge_result {
 public:

  ClusteringService_SendHumanMerge_result() {
  }

  virtual ~ClusteringService_SendHumanMerge_result() throw() {}


  bool operator == (const ClusteringService_SendHumanMerge_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClusteringService_SendHumanMerge_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusteringService_SendHumanMerge_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClusteringService_SendHumanMerge_presult {
 public:


  virtual ~ClusteringService_SendHumanMerge_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClusteringService_SendHumanDelete_args__isset {
  _ClusteringService_SendHumanDelete_args__isset() : cluster_id(false) {}
  bool cluster_id;
} _ClusteringService_SendHumanDelete_args__isset;

class ClusteringService_SendHumanDelete_args {
 public:

  ClusteringService_SendHumanDelete_args() : cluster_id(0) {
  }

  virtual ~ClusteringService_SendHumanDelete_args() throw() {}

  int64_t cluster_id;

  _ClusteringService_SendHumanDelete_args__isset __isset;

  void __set_cluster_id(const int64_t val) {
    cluster_id = val;
  }

  bool operator == (const ClusteringService_SendHumanDelete_args & rhs) const
  {
    if (!(cluster_id == rhs.cluster_id))
      return false;
    return true;
  }
  bool operator != (const ClusteringService_SendHumanDelete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusteringService_SendHumanDelete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClusteringService_SendHumanDelete_pargs {
 public:


  virtual ~ClusteringService_SendHumanDelete_pargs() throw() {}

  const int64_t* cluster_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClusteringService_SendHumanDelete_result {
 public:

  ClusteringService_SendHumanDelete_result() {
  }

  virtual ~ClusteringService_SendHumanDelete_result() throw() {}


  bool operator == (const ClusteringService_SendHumanDelete_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClusteringService_SendHumanDelete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusteringService_SendHumanDelete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClusteringService_SendHumanDelete_presult {
 public:


  virtual ~ClusteringService_SendHumanDelete_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ClusteringService_IsAlive_args {
 public:

  ClusteringService_IsAlive_args() {
  }

  virtual ~ClusteringService_IsAlive_args() throw() {}


  bool operator == (const ClusteringService_IsAlive_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClusteringService_IsAlive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusteringService_IsAlive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClusteringService_IsAlive_pargs {
 public:


  virtual ~ClusteringService_IsAlive_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusteringService_IsAlive_result__isset {
  _ClusteringService_IsAlive_result__isset() : success(false) {}
  bool success;
} _ClusteringService_IsAlive_result__isset;

class ClusteringService_IsAlive_result {
 public:

  ClusteringService_IsAlive_result() : success(0) {
  }

  virtual ~ClusteringService_IsAlive_result() throw() {}

  int32_t success;

  _ClusteringService_IsAlive_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ClusteringService_IsAlive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClusteringService_IsAlive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClusteringService_IsAlive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClusteringService_IsAlive_presult__isset {
  _ClusteringService_IsAlive_presult__isset() : success(false) {}
  bool success;
} _ClusteringService_IsAlive_presult__isset;

class ClusteringService_IsAlive_presult {
 public:


  virtual ~ClusteringService_IsAlive_presult() throw() {}

  int32_t* success;

  _ClusteringService_IsAlive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClusteringServiceClient : virtual public ClusteringServiceIf {
 public:
  ClusteringServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ClusteringServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void SendHumanMerge(const int64_t cluster_id1, const int64_t cluster_id2);
  void send_SendHumanMerge(const int64_t cluster_id1, const int64_t cluster_id2);
  void recv_SendHumanMerge();
  void SendHumanDelete(const int64_t cluster_id);
  void send_SendHumanDelete(const int64_t cluster_id);
  void recv_SendHumanDelete();
  int32_t IsAlive();
  void send_IsAlive();
  int32_t recv_IsAlive();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ClusteringServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ClusteringServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ClusteringServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_SendHumanMerge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SendHumanDelete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsAlive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ClusteringServiceProcessor(boost::shared_ptr<ClusteringServiceIf> iface) :
    iface_(iface) {
    processMap_["SendHumanMerge"] = &ClusteringServiceProcessor::process_SendHumanMerge;
    processMap_["SendHumanDelete"] = &ClusteringServiceProcessor::process_SendHumanDelete;
    processMap_["IsAlive"] = &ClusteringServiceProcessor::process_IsAlive;
  }

  virtual ~ClusteringServiceProcessor() {}
};

class ClusteringServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ClusteringServiceProcessorFactory(const ::boost::shared_ptr< ClusteringServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ClusteringServiceIfFactory > handlerFactory_;
};

class ClusteringServiceMultiface : virtual public ClusteringServiceIf {
 public:
  ClusteringServiceMultiface(std::vector<boost::shared_ptr<ClusteringServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ClusteringServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ClusteringServiceIf> > ifaces_;
  ClusteringServiceMultiface() {}
  void add(boost::shared_ptr<ClusteringServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void SendHumanMerge(const int64_t cluster_id1, const int64_t cluster_id2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendHumanMerge(cluster_id1, cluster_id2);
    }
    ifaces_[i]->SendHumanMerge(cluster_id1, cluster_id2);
  }

  void SendHumanDelete(const int64_t cluster_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendHumanDelete(cluster_id);
    }
    ifaces_[i]->SendHumanDelete(cluster_id);
  }

  int32_t IsAlive() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->IsAlive();
    }
    return ifaces_[i]->IsAlive();
  }

};



#endif
