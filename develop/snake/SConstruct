import sys
import Util
import os
import socket
import SCons
from datetime import datetime

import Flags
import Path
import BuildManager
scons_dir = ARGUMENTS.get('scons_dir', '')

if scons_dir != '':
  # print('')
  # print('%s  %s' % (Util.Highlight('scons dir:', 1, False), scons_dir))
  sys.path.insert(0, scons_dir)

python_dir = ARGUMENTS.get('python_dir', '')
if python_dir != '':
  # print('%s %s'% (Util.Highlight('python dir:', 1, False), python_dir))
  # print('')
  sys.path.insert(0, scons_dir)

EnsureSConsVersion(1, 2)
EnsurePythonVersion(2, 6)

Util.EnsureSnakeDir()

# use the shell's evniron if use_os_env=on is set
use_os_env = ARGUMENTS.get('use_os_env', 'off')
if use_os_env == 'on':
  base_env = Environment(ENV = os.environ)
else:
  base_env = Environment()

Util.PrepareEnv(base_env)

_build_strategy = ARGUMENTS.get('c', 'dbg')

print('%s         %s UTC %s' %
      (Util.Highlight('Build at:', 1, False),
       socket.gethostname(), datetime.utcnow()))
print('%s       %s %s' %
      (Util.Highlight('Build with:', 1, False),
       '-'.join((base_env['CXX'], base_env['CXXVERSION'])),
       '-'.join((base_env['CC'], base_env['CCVERSION']))))
(sysname, nodename, release, version, machine) = os.uname()
print('%s   %s' %
      (Util.Highlight('Build platform:', 1, False),
       '-'.join((sysname, release, machine))))
print('%s   %s' %
      (Util.Highlight('Build strategy:', 1, False), _build_strategy))
print('%s  %s' %
      (Util.Highlight('Build directory:', 1, False), Flags.SNAKE_OUT))
print('')

_build_target = ARGUMENTS.get('t')
if _build_target == None:
  Util.Abort('no target specified.')


base_env.VariantDir(Path.GetOutputDir(), Path.GetBaseDir(), duplicate = 0)

# user our parser to analysis the dependencies and build

target = Path.GetLogicalPath(ARGUMENTS.get('cur_dir'), _build_target)
build_manager = BuildManager.GetBuildManager(base_env)
build_manager.Build(target)
